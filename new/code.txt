measure code:

import cProfile, pstats, io
from pstats import SortKey
pr = cProfile.Profile()
pr.enable()
# ... do something ...
pr.disable()
s = io.StringIO()
sortby = SortKey.CUMULATIVE
ps = pstats.Stats(pr, stream=s).sort_stats(sortby)
ps.print_stats()
print(s.getvalue())

or

import cProfile

with cProfile.Profile() as pr:
    # ... do something ...

pr.print_stats()



async def my_loop():
    res = False
    while not res:
        res = await do_something()

await asyncio.wait_for(my_loop(), 10)







get reading from sensor

min max avg actual
















class Decibel:
    #rounding = 0
    #stats = 0
    def __init__(self):
        self.rounding = 0
        self.soundSensorPin = ADC(board.A2)  # this pin read the analog voltage from the sound level meter
        self.vREF = 5.0  # voltage on AREF pin,default:operating voltage
        self.offset = 0  # offset value for calibration
        self.stats = None

    class DecibelStats:
        stats = None
        def __init__(self, outer):
            self.__storage = deque([], maxlen=25)
            self.__min = 0
            self.__max = 0
            self.outer = outer
        def __str__(self):
            return f"db:{self.dec} sampleMin:{self.sampleMin()}  sampleMax:{self.sampleMax()}  min:{self.overallMin()}  max:{self.overallMax()}. avg:{self.avg()}"

        def setDecibel(self, dec):
            self.dec = dec

            if self.__min == 0 or self.__min >= dec:
                self.__min = dec

            if self.__max == 0 or self.__max <= dec:
                self.__max = dec

            self.__storage.appendleft(dec)

        def overallMin(self):
            return self.__min

        def overallMax(self):
            return self.__max

        def sampleMin(self):
            return round(min(self.__storage), self.outer.rounding)

        def sampleMax(self):
            return round(max(self.__storage), self.outer.rounding)

        def avg(self):
            return round(mean(self.__storage), self.outer.rounding)




    def readDecibel(self):

        readings = []

        # get 10 samples
        for i in range(10):
            # read value from sensor
            voltageValue = self.soundSensorPin.read() 
            #decibelValue = (voltageValue / 1024 * self.vREF) * 50
            decibelValue=(raw / 1024.0) * 2) + 10
            # read value into array
            readings.append(decibelValue + self.offset)

        # calculate averge
        decibel = round(mean(readings), self.rounding)

        # time.sleep(0.1)

        return decibel

